To build a decision tree classifier with the given features and a maximum depth of 2, I will first identify the most important features that distinguish between Democrats and Republicans. Since this is a binary classification problem, I'll use the features provided to create a simple decision tree.

For simplicity, let's assume the data reflects typical voting patterns where:

- Votes on issues like aid to El Salvador, Nicaraguan contras, MX missile, and anti-satellite test ban tend to be more supported by Republicans.
- Votes on issues like education spending, superfund right to sue, and duty-free exports might have mixed support but could lean towards Democrats for certain aspects like increased spending on education.

Given the complexity of the data and without actual voting records or a clear indication of how each vote aligns with party lines across all features, I'll create a simplified decision tree based on general trends. This example uses "Vote on aid to El Salvador" and "Vote on education spending" as the two most distinguishing features for simplicity.

Decision Tree:
|--- Vote on aid to El Salvador (yes / no)
||--- class: Republican
|--- Vote on aid to El Salvador (no)
||--- Vote on education spending (yes / no)
|||--- class: Democrat
||--- Vote on education spending (no)
|||--- class: Republican

This decision tree is highly simplified and based on the assumption that:
- A "yes" vote on aid to El Salvador is more likely to be cast by a Republican.
- A "no" vote on aid to El Salvador, combined with a "yes" vote on education spending, would classify someone as a Democrat, reflecting potential support for social or domestic spending initiatives.

Please note, this is an oversimplification and real-world data may not follow such clear-cut distinctions. Actual voting patterns can be influenced by numerous factors including the context of each vote, the political climate at the time, and individual congressman's beliefs that may not strictly adhere to party lines. For accurate classification, analyzing actual voting data with more sophisticated methods would be necessary.


#########################


Here is the Python function that implements the decision tree classifier:

```python
def predict(X: dict):
    """
    Predicts party affiliation based on voting history.

    Parameters:
    X (dict): A dictionary containing the features.
             - handicapped-infants: Vote on the issue of handicapped infants (2 = yes, 1 = no)
             - water-project-cost-sharing: Vote on water project cost sharing (2 = yes, 1 = no)
             - adoption-of-the-budget-resolution: Vote on adoption of the budget resolution (2 = yes, 1 = no)
             - physician-fee-freeze: Vote on physician fee freeze (2 = yes, 1 = no)
             - el-salvador-adi: Vote on aid to El Salvador (2 = yes, 1 = no)
             - religious-groups-in-schools: Vote on allowing religious groups in schools (2 = yes, 1 = no)
             - anti-satellite-test-ban: Vote on anti-satellite test ban (2 = yes, 1 = no)
             - aid-to-nicaraguan-contras: Vote on aid to Nicaraguan contras (2 = yes, 1 = no)
             - mx-missile: Vote on MX missile (2 = yes, 1 = no)
             - immigration: Vote on immigration (2 = yes, 1 = no)
             - synfuels-corporation-cutback: Vote on synfuels corporation cutback (2 = yes, 1 = no)
             - education-spending: Vote on education spending (2 = yes, 1 = no)
             - superfund-right-to-sue: Vote on superfund right to sue (2 = yes, 1 = no)
             - crime: Vote on crime (2 = yes, 1 = no)
             - duty-free-exports: Vote on duty-free exports (2 = yes, 1 = no)
             - export-administration-act-south-africa: Vote on Export Administration Act - South Africa (2 = yes, 1 = no)

    Returns:
    prediction (int): The predicted party affiliation (0 = democrat, 1 = republican).
    nodes (list): A list representing the truth values of the inner nodes.
    """

    # Initialize nodes
    nodes = 2 * [None]
    
    # Check if vote on aid to El Salvador is yes (2)
    nodes[0] = X["el-salvador-adi"] == 2
    
    # If vote on aid to El Salvador is no, check education spending
    if not nodes[0]:
        nodes[1] = X["education-spending"] == 1  # Vote against education spending (1 = no)
    else:
        nodes[1] = False  # This node doesn't matter in this case

    # Make prediction based on the nodes
    if nodes[0]:  # Voted for aid to El Salvador
        prediction = 1  # Predict republican
    elif not nodes[1]:  # Didn't vote against education spending (voted for)
        prediction = 0  # Predict democrat
    else:  # Voted against education spending
        prediction = 1  # Predict republican

    # Convert boolean nodes to integers (1 if True, 0 if False)
    nodes = [int(node) for node in nodes]

    return prediction, nodes
```

This function first checks the vote on aid to El Salvador. If it's yes (2), the function predicts republican. If not, it then checks the education spending vote. If the vote is against education spending (1 = no), the function predicts republican; otherwise, it predicts democrat. The `nodes` list keeps track of the truth values of these inner nodes and returns them along with the prediction.