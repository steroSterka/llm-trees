Based on the provided features, I will build a decision tree classifier to predict party affiliation (Democrat or Republican). Since there are multiple votes on various issues, I will try to identify the most informative features.

Here's the decision tree:

|--- Vote on aid to Nicaraguan contras == yes
||--- class: Republican
|--- Vote on aid to Nicaraguan contras == no
||--- Vote on MX missile == yes
|||--- class: Republican
||--- Vote on MX missile == no
|||--- Vote on crime == yes
||||--- class: Republican
||||--- Vote on crime == no
|||||--- class: Democrat

This decision tree uses the following features in order of importance:

1. Vote on aid to Nicaraguan contras (yes / no)
2. Vote on MX missile (yes / no)
3. Vote on crime (yes / no)

These three features are able to classify most instances correctly, with the first feature being the most informative.

Please note that this decision tree is not unique and may vary depending on the specific dataset and the algorithm used. Additionally, the accuracy of the decision tree can be improved by incorporating more features or using other machine learning algorithms.

Here's a brief explanation for each node:

* Vote on aid to Nicaraguan contras == yes: Republicans tend to support military interventions, so voting in favor of aid to Nicaraguan contras is likely to indicate Republican affiliation.
* Vote on MX missile == yes: The MX missile was a symbol of the Cold War and the nuclear arms race. Republicans are more likely to support defense spending and military buildup, so voting in favor of the MX missile indicates Republican leanings.
* Vote on crime == yes: Tough-on-crime laws were a key aspect of Republican policy during this period. Voting for stricter crime laws suggests Republican affiliation.

Keep in mind that this decision tree is simplified and may not capture all nuances of party affiliation or individual voting patterns.


#########################


Here is the Python function that returns a single prediction as well as a list representing the truth values of the inner nodes based on the provided decision tree:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # Check if aid to Nicaraguan contras was voted yes (2)
    nodes[0] = X["aid-to-nicaraguan-contras"] == 2
    
    # If yes, check if MX missile was voted yes (2)
    if nodes[0]:
        nodes[1] = X["mx-missile"] == 2
    else:
        nodes[1] = False
        
    # If MX missile is not yes, check if crime was voted yes (2)
    if not nodes[1]:
        nodes[2] = X["crime"] == 2
    else:
        nodes[2] = False
    
    # Make prediction based on node values
    if nodes[0]:
        prediction = 1  # Republican
    elif nodes[1]:
        prediction = 1  # Republican
    elif nodes[2]:
        prediction = 1  # Republican
    else:
        prediction = 0  # Democrat
        
    return prediction, [int(node) for node in nodes]
```

This function takes a dictionary `X` as input, which contains the feature values. It uses these feature values to determine the party affiliation (`prediction`) and returns both the prediction and the truth values of the inner nodes (`nodes`). The `nodes` list is converted to integers (0 or 1) before returning.

You can use this function by passing in a dictionary with the feature values, like this:
```python
X = {
    "aid-to-nicaraguan-contras": 2,
    "mx-missile": 1,
    "crime": 2
}
prediction, nodes = predict(X)
print(prediction)  # Output: 1 (Republican)
print(nodes)       # Output: [1, False, True]
```