Based on the provided features, I will build a decision tree classifier using the most important features to classify party affiliation as either Democrat or Republican.

After analyzing the features, I selected the top 5 most informative features that contribute the most to the classification. These features are:

1. Vote on aid to El Salvador (yes / no)
2. Vote on anti-satellite test ban (yes / no)
3. Vote on MX missile (yes / no)
4. Vote on crime (yes / no)
5. Vote on Export Administration Act - South Africa (yes / no)

Using these features, the decision tree is:

|--- Vote on aid to El Salvador == yes
||--- class: Republican
|--- Vote on aid to El Salvador == no
||--- Vote on anti-satellite test ban == yes
|||--- class: Democrat
||--- Vote on anti-satellite test ban == no
|||--- Vote on MX missile == yes
||||--- class: Republican
|||--- Vote on MX missile == no
||||--- Vote on crime == yes
|||||--- class: Democrat
||||--- Vote on crime == no
|||||--- Vote on Export Administration Act - South Africa == yes
||||||--- class: Democrat
|||||--- Vote on Export Administration Act - South Africa == no
||||||--- class: Republican

Note that this decision tree is not exhaustive, and there may be other possible trees with similar performance. However, this tree captures the most important features and their relationships to classify party affiliation.

Here's a brief explanation of each feature and its contribution:

* Vote on aid to El Salvador: This feature seems to be highly correlated with Republican affiliation.
* Vote on anti-satellite test ban: Democrats tend to vote against this ban, while Republicans are more likely to support it.
* Vote on MX missile: Republicans generally support the development of the MX missile, whereas Democrats tend to oppose it.
* Vote on crime: Democrats often take a tougher stance on crime, which is reflected in their voting behavior.
* Vote on Export Administration Act - South Africa: This feature captures the parties' differing views on trade and sanctions.

Keep in mind that this analysis is based on the provided features and might not reflect real-world complexities. The decision tree should be interpreted as a simplified representation of the relationship between these specific features and party affiliation.


#########################


Here is the Python function that implements the decision tree:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["el-salvador-adi"] == 2
    nodes[1] = X["anti-satellite-test-ban"] == 2
    nodes[2] = X["mx-missile"] == 2
    nodes[3] = X["crime"] == 2
    nodes[4] = X["export-administration-act-south-africa"] == 2

    if nodes[0]:
        prediction = 1
    else:
        if nodes[1]:
            prediction = 0
        else:
            if nodes[2]:
                prediction = 1
            else:
                if nodes[3]:
                    prediction = 0
                else:
                    if nodes[4]:
                        prediction = 0
                    else:
                        prediction = 1

    return prediction, [int(node) for node in nodes]
```

This function takes a dictionary `X` as input, where each key corresponds to a feature and the value is the feature's value. The function then evaluates the decision tree based on these values and returns the predicted party affiliation (0 = democrat, 1 = republican) along with a list of boolean values representing the states of the nodes in the tree.

Note that I used `X["feature_name"] == 2` to check if a feature is equal to 2, since the problem statement specifies that 2 represents "yes" or "present" for each feature. Similarly, I used `[int(node) for node in nodes]` to convert the boolean values of the nodes into integers (0 or 1) before returning them.