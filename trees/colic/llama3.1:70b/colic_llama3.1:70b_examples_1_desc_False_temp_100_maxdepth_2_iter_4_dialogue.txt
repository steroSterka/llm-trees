Based on the provided features, I will build a decision tree with a maximum depth of 2 to classify whether a horse colic lesion is surgical or not. After analyzing the features, I selected the most important ones for the decision tree. Here is the result:

|--- Nasogastric Reflux (>1 liter) 
||--- class: Surgical
|--- Nasogastric Reflux (<= 1 liter)
||--- Abdominocentesis Total Protein (g/dl) > 3.5 
|||--- class: Surgical
||--- Abdominocentesis Total Protein (g/dl) <= 3.5 
|||--- class: Non-Surgical

Note that the decision tree is not unique, and different trees can be constructed based on the same data. However, this tree uses two of the most informative features:

1. Nasogastric Reflux (>1 liter): A large amount of reflux is often indicative of a more severe condition requiring surgical intervention.
2. Abdominocentesis Total Protein (g/dl) > 3.5: High protein levels in the abdominocentesis fluid can indicate a significant inflammatory response or perforation, which may require surgery.

These features are used to create a simple decision tree that classifies whether a horse colic lesion is surgical or not. The tree has a maximum depth of 2, as requested.


#########################


Here is the Python function that implements the decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["nasogastric_reflux"] == 0  # Nasogastric Reflux (>1 liter)
    nodes[1] = X["abdomcentesis_total_protein"] > 3.5  # Abdominocentesis Total Protein (g/dl) > 3.5

    if not nodes[0]:  # Nasogastric Reflux (<= 1 liter)
        if nodes[1]:
            prediction = 1  # Surgical
        else:
            prediction = 0  # Non-Surgical
    else:  # Nasogastric Reflux (>1 liter)
        prediction = 1  # Surgical

    return prediction, nodes
```

This function takes a dictionary `X` as input, where each key corresponds to a feature in the dataset. The function evaluates the decision tree and returns a tuple containing:

* `prediction`: an integer indicating whether a horse colic lesion is surgical (1) or not (0)
* `nodes`: a list of two boolean values representing the truth values of the inner nodes in the decision tree

Note that I used the exact keys from the feature description to ensure accurate matching. Also, I filled in the threshold values based on the feature descriptions and the problem statement.