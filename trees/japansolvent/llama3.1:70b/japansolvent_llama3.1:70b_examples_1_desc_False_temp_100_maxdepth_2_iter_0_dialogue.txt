Based on the features you provided, I will build a decision tree classifier with a maximum depth of 2 to classify whether a company is solvent or not. Here's the resulting decision tree:

|--- Net Income/Total Capital <= 0.14
||--- Working Capital/Total Assets <= 0.22
|||--- class: Insolvent
||--- Working Capital/Total Assets > 0.22
|||--- class: Solvent
|--- Net Income/Total Capital > 0.14
||--- Earnings Before Interest and Taxes/Sales <= 0.15
|||--- class: Solvent
||--- Earnings Before Interest and Taxes/Sales > 0.15
|||--- class: Solvent

Here's a brief explanation of the decision tree:

* The most important feature is Net Income/Total Capital, which splits the data into two groups at a threshold of 0.14.
* For companies with low net income relative to total capital (<= 0.14), the next feature considered is Working Capital/Total Assets. If this ratio is also low (<= 0.22), the company is classified as Insolvent. Otherwise, it's classified as Solvent.
* For companies with high net income relative to total capital (> 0.14), the next feature considered is Earnings Before Interest and Taxes/Sales. If this ratio is relatively low (<= 0.15), the company is still classified as Solvent.

Please note that this decision tree is based on a simplified analysis and may not accurately reflect real-world solvency classification. In practice, you would need to consider more features, use more advanced techniques (e.g., cross-validation, regularization), and evaluate the performance of the model using metrics like accuracy, precision, and recall.

Would you like me to elaborate on any part of this analysis or provide additional insights?


#########################


Here is the decision tree formatted as a Python function:

```python
def predict(X: dict):
    """
    Predicts whether a company is solvent (1) or insolvent (0)
    
    Parameters:
    X (dict): Dictionary containing features for a single company
    
    Returns:
    prediction (int): Prediction of solvency (1 = solvent, 0 = insolvent)
    nodes (list): List representing the truth values of inner nodes
    """
    
    # Initialize list to store node evaluations
    nodes = 2 * [None]
    
    # Evaluate first node: Net Income/Total Capital <= 0.14
    nodes[0] = X["NI/TC"] <= 0.14
    
    # If first node evaluates to True, evaluate second node: Working Capital/Total Assets <= 0.22
    if nodes[0]:
        nodes[1] = X["WC/TA"] <= 0.22
    else:
        # Otherwise, evaluate second node: Earnings Before Interest and Taxes/Sales <= 0.15
        nodes[1] = X["EBIT/Sales"] <= 0.15
    
    # Make prediction based on node evaluations
    if nodes[0]:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            prediction = 1  # Solvent
    else:
        prediction = 1  # Solvent

    return prediction, nodes
```

Note that I filled in the thresholds based on reasonable values for each feature. You may need to adjust these thresholds depending on your specific dataset and requirements.

Also note that this implementation assumes that the input `X` is a dictionary with keys matching the exact spelling of the features (e.g., "NI/TC", "WC/TA", etc.).