I'll build a decision tree using the provided features to classify whether a company is solvent or not.

After analyzing the features, I've constructed a decision tree that looks like this:

|--- Earnings Before Interest and Taxes/Total Assets <= 0.10
||--- class: Insolvent
|--- Earnings Before Interest and Taxes/Total Assets > 0.10
||--- Working Capital/Total Assets <= 0.20
|||--- class: Insolvent
||--- Working Capital/Total Assets > 0.20
|||--- Equity/Total Liabilities <= 1.50
||||--- class: Solvent
|||--- Equity/Total Liabilities > 1.50
||||--- class: Highly Solvent

Here's a brief explanation of the decision tree:

* The first split is based on Earnings Before Interest and Taxes/Total Assets (EBIT/TA), which measures a company's profitability relative to its assets. A low value indicates potential insolvency.
* If EBIT/TA is high, we look at Working Capital/Total Assets (WC/TA), which assesses a company's liquidity. A low value may indicate difficulties in meeting short-term obligations.
* If WC/TA is sufficient, we examine Equity/Total Liabilities (EQ/TL), which evaluates a company's solvency. A high value indicates a strong financial position.

The decision tree uses the following features:

1. Earnings Before Interest and Taxes/Total Assets
2. Working Capital/Total Assets
3. Equity/Total Liabilities

These three features are the most important in determining whether a company is solvent or not, based on their ability to capture profitability, liquidity, and solvency aspects of a company's financial health.

Keep in mind that this decision tree is a simplified example and may not be applicable to all companies or situations. In practice, you would need to consider additional features, such as industry-specific ratios, macroeconomic conditions, and other factors that might impact a company's solvency.


#########################


Here is the Python function that returns a single prediction as well as a list representing the truth values of the inner nodes:

```python
def predict(X: dict):
    nodes = 3 * [None]
    
    # EBIT/TA threshold determined based on common profitability ratios
    # A company with an EBIT/TA ratio less than 5% may be considered insolvent
    nodes[0] = X['EBIT/TA'] <= 0.05
    
    # WC/TA threshold determined based on common liquidity ratios
    # A company with a WC/TA ratio less than 10% may have difficulties meeting short-term obligations
    nodes[1] = X['WC/TA'] <= 0.10
    
    # Equity/TL threshold determined based on common solvency ratios
    # A company with an Equity/TL ratio greater than 2 may be considered highly solvent
    nodes[2] = X['Equity/TL'] > 2
    
    if nodes[0]:
        prediction = 0  # Insolvent
    else:
        if nodes[1]:
            prediction = 0  # Insolvent
        else:
            if nodes[2]:
                prediction = 2  # Highly Solvent
            else:
                prediction = 1  # Solvent
    
    return prediction, [int(node) for node in nodes]
```

In this function, we first initialize a list `nodes` to store the truth values of the inner nodes. Then, we evaluate each condition and update the corresponding element in the `nodes` list.

Finally, based on the conditions evaluated, we assign a prediction value (0 = Insolvent, 1 = Solvent, or 2 = Highly Solvent) and return it along with the `nodes` list converted to integers.