Based on the provided features, I will build a decision tree classifier to predict whether a company is solvent or not.

Here's the decision tree:

|--- Earnings Before Interest and Taxes/Total Assets <= 0.05
||--- class: Insolvent
|--- Earnings Before Interest and Taxes/Total Assets > 0.05
||--- Net Income/Total Capital <= 0.10
|||--- Working Capital/Total Assets <= 0.20
||||--- class: Insolvent
||||--- Working Capital/Total Assets > 0.20
|||||--- Equity/Total Liabilities <= 1.50
||||||--- class: Solvent
||||||--- Equity/Total Liabilities > 1.50
|||||||--- class: Solvent
|||--- Net Income/Total Capital > 0.10
|||--- Earnings Before Interest and Taxes/Sales <= 0.15
||||--- class: Insolvent
||||--- Earnings Before Interest and Taxes/Sales > 0.15
|||||--- class: Solvent

Here's a brief explanation of the decision tree:

1. The first split is based on Earnings Before Interest and Taxes/Total Assets, which is a measure of a company's profitability. If this ratio is less than or equal to 0.05, the company is likely insolvent.
2. For companies with higher profitability (Earnings Before Interest and Taxes/Total Assets > 0.05), we consider Net Income/Total Capital, which represents a company's ability to generate earnings from its capital. If this ratio is less than or equal to 0.10, the company may be at risk of insolvency.
3. Within this subset, Working Capital/Total Assets becomes an important factor. A low working capital ratio (<= 0.20) increases the likelihood of insolvency.
4. For companies with higher working capital ratios (> 0.20), Equity/Total Liabilities is considered. If this ratio is less than or equal to 1.50, the company may still be solvent.
5. Finally, for companies with high Net Income/Total Capital (> 0.10) and Earnings Before Interest and Taxes/Sales greater than 0.15, they are likely solvent.

Please note that this decision tree is a simplified example and actual results may vary depending on the specific dataset used to train the model.


#########################


Here is the Python function that implements the decision tree:

```python
def predict(X: dict):
    nodes = 7 * [None]
    
    # Node 0: EBIT/TA <= 0.05
    nodes[0] = X['EBIT/TA'] <= 0.05
    
    # Node 1: NI/TC <= 0.10
    nodes[1] = X['NI/TC'] <= 0.10
    
    # Node 2: WC/TA <= 0.20
    nodes[2] = X['WC/TA'] <= 0.20
    
    # Node 3: Equity/TL <= 1.50
    nodes[3] = X['Equity/TL'] <= 1.50
    
    # Node 4: EBIT/Sales <= 0.15
    nodes[4] = X['EBIT/Sales'] <= 0.15
    
    # Node 5: NI/TC > 0.10 and EBIT/Sales > 0.15
    nodes[5] = (X['NI/TC'] > 0.10) and (X['EBIT/Sales'] > 0.15)
    
    # Node 6: EBIT/TA > 0.05 and NI/TC <= 0.10 and WC/TA > 0.20
    nodes[6] = (X['EBIT/TA'] > 0.05) and (X['NI/TC'] <= 0.10) and (X['WC/TA'] > 0.20)
    
    if nodes[0]:
        prediction = 0
    else:
        if nodes[1]:
            if nodes[2]:
                if nodes[3]:
                    prediction = 0
                else:
                    prediction = 1
            else:
                if nodes[4]:
                    prediction = 0
                else:
                    prediction = 1
        else:
            if nodes[5]:
                prediction = 1
            else:
                prediction = 0
    
    return prediction, [int(node) for node in nodes]
```

This function takes a dictionary `X` as input and returns the predicted class label (`prediction`) along with a list of binary values representing the decision path taken by the tree (`nodes`). The binary values are represented as integers (0 or 1).