Based on the provided features, I'll build a decision tree to classify whether a company went bankrupt or not. Here's the decision tree:

|--- Working Capital/Total Assets <= 0.15
||--- class: Bankrupt
|--- Working Capital/Total Assets > 0.15
||--- Retained Earnings/Total Assets <= 0.30
|||--- class: Bankrupt
||--- Retained Earnings/Total Assets > 0.30
|||--- Book Value of Equity/Book Value of Liabilities <= 2.50
||||--- class: Non-Bankrupt
|||--- Book Value of Equity/Book Value of Liabilities > 2.50
||||--- class: Non-Bankrupt

Here's a brief explanation of the decision tree:

1. The first split is based on Working Capital/Total Assets, which indicates liquidity and short-term financial health. A ratio below 0.15 suggests that the company may struggle to meet its short-term obligations, leading to bankruptcy.
2. If the company passes the initial test (Working Capital/Total Assets > 0.15), the next split is based on Retained Earnings/Total Assets. This ratio measures profitability and financial stability over time. A ratio below 0.30 may indicate that the company has not been generating sufficient profits or retaining enough earnings, increasing its bankruptcy risk.
3. If the company passes both initial tests (Working Capital/Total Assets > 0.15 and Retained Earnings/Total Assets > 0.30), the final split is based on Book Value of Equity/Book Value of Liabilities. This ratio assesses a company's capital structure and solvency. A ratio below 2.50 may indicate that the company has too much debt or not enough equity, which can lead to financial distress.

Note that this decision tree is a simplified representation, and actual decision trees used in practice might include more features, complex relationships between them, and different thresholds. Additionally, feature importance and selection can be optimized using techniques such as recursive feature elimination (RFE) or permutation importance.


#########################


Here is the decision tree as a Python function:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X['WC/TA'] <= 0.15
    nodes[1] = X['RE/TA'] <= 0.30
    nodes[2] = X['BVE/BVL'] <= 2.50

    if nodes[0]:
        prediction = 1
    else:
        if nodes[1]:
            prediction = 1
        else:
            if nodes[2]:
                prediction = 0
            else:
                prediction = 0

    return prediction, [int(node) for node in nodes]
```

This function takes a dictionary `X` with features as input and returns a tuple containing the predicted class label (0 or 1) and a list of truth values representing the inner nodes. The list contains 1 if the condition is satisfied and 0 otherwise.

Note that I've used meaningful threshold values based on general guidelines for financial ratios:

* Working Capital/Total Assets <= 0.15 indicates potential liquidity issues.
* Retained Earnings/Total Assets <= 0.30 may indicate insufficient profitability or retained earnings.
* Book Value of Equity/Book Value of Liabilities <= 2.50 suggests a relatively safe capital structure.

These threshold values can be adjusted based on domain expertise or further analysis of the data.