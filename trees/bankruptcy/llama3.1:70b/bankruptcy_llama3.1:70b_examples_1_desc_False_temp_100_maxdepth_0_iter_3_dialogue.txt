Based on the features you provided, I'll build a decision tree to classify whether a company went bankrupt or not. Here's the result:

|--- Working Capital/Total Assets <= 0.25
||--- class: Bankrupt
|--- Working Capital/Total Assets > 0.25
||--- Retained Earnings/Total Assets <= 0.10
|||--- class: Bankrupt
||--- Retained Earnings/Total Assets > 0.10
|||--- Sales/Total Assets <= 0.60
||||--- class: Bankrupt
||||--- Sales/Total Assets > 0.60
|||||--- class: Not Bankrupt

Here's a brief explanation of the decision tree:

1. The first split is based on Working Capital/Total Assets, which is a common indicator of a company's liquidity and ability to meet its short-term obligations. A value below 0.25 suggests that the company may be at risk of bankruptcy.
2. If the company has sufficient working capital, the next split is based on Retained Earnings/Total Assets, which reflects the company's profitability and ability to generate earnings. A value below 0.10 indicates that the company may not have enough retained earnings to sustain itself.
3. If the company has sufficient retained earnings, the next split is based on Sales/Total Assets, which measures the company's revenue-generating capability. A value below 0.60 suggests that the company may not be generating enough sales to support its operations.

Note that this decision tree is a simplified example and may not accurately predict bankruptcy in all cases. In practice, you would want to use more features, consider interactions between features, and validate the model using a larger dataset.

Also, I used a threshold-based approach for simplicity, but in reality, you might want to experiment with different algorithms (e.g., CART, C4.5, or Random Forest) and tuning parameters to improve the accuracy of the decision tree.


#########################


Here is the Python function that implements the decision tree:

```python
def predict(X: dict):
    """
    Predicts whether a company went bankrupt or not based on its financial features.

    Parameters:
    X (dict): A dictionary containing the financial features of the company.
              The keys should be 'WC/TA', 'RE/TA', 'EBIT/TA', 'S/TA', and 'BVE/BVL'.

    Returns:
    prediction (int): 0 if the company did not go bankrupt, 1 if it went bankrupt.
    nodes (list): A list of truth values for each inner node in the decision tree.
                  The values are 1 if the condition is satisfied, 0 otherwise.
    """

    # Initialize the list to store the truth values of the inner nodes
    nodes = [None] * 3

    # Node 1: WC/TA <= 0.25
    nodes[0] = X['WC/TA'] <= 0.25

    # If the company's working capital is low, it may go bankrupt
    if nodes[0]:
        prediction = 1  # Predict bankruptcy
    else:
        # Node 2: RE/TA <= 0.10
        nodes[1] = X['RE/TA'] <= 0.10

        # If the company's retained earnings are low, it may go bankrupt
        if nodes[1]:
            prediction = 1  # Predict bankruptcy
        else:
            # Node 3: S/TA <= 0.60
            nodes[2] = X['S/TA'] <= 0.60

            # If the company's sales are low, it may go bankrupt
            if nodes[2]:
                prediction = 1  # Predict bankruptcy
            else:
                prediction = 0  # Predict no bankruptcy

    return prediction, nodes
```

You can use this function by passing a dictionary containing the financial features of a company as an argument. The function will return a prediction (0 or 1) and a list of truth values for each inner node in the decision tree.

Example usage:
```python
X = {'WC/TA': 0.2, 'RE/TA': 0.15, 'EBIT/TA': 0.05, 'S/TA': 0.50, 'BVE/BVL': 1.5}
prediction, nodes = predict(X)
print("Prediction:", prediction)
print("Nodes:", nodes)
```