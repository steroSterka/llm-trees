Based on the provided features, I'll build a decision tree with a maximum depth of 2 to classify whether a company went bankrupt or not.

Using the most important features (based on general financial analysis), I'll construct the decision tree. Here's the result:

Decision Tree:
|--- Working Capital/Total Assets <= 0.20
||--- class: Bankrupt
|--- Working Capital/Total Assets > 0.20
||--- Retained Earnings/Total Assets <= 0.50
|||--- class: Bankrupt
||--- Retained Earnings/Total Assets > 0.50
|||--- class: Not Bankrupt

Here's a brief explanation of the decision tree:

* The first split is based on Working Capital/Total Assets, which indicates a company's liquidity and ability to meet short-term obligations. A low ratio (< 0.20) suggests financial distress, leading to a higher likelihood of bankruptcy.
* For companies with a Working Capital/Total Assets ratio above 0.20, the next split is based on Retained Earnings/Total Assets. This ratio reflects a company's profitability and ability to generate earnings. A low retained earnings ratio (< 0.50) may indicate financial difficulties, increasing the likelihood of bankruptcy.
* Companies with a high Working Capital/Total Assets ratio (> 0.20) and a high Retained Earnings/Total Assets ratio (> 0.50) are more likely to be financially stable, leading to a classification of "Not Bankrupt".

Note that this decision tree is a simplified representation and may not capture all nuances of financial analysis. In practice, you might want to consider additional features, handle missing values, and tune the model for better performance on your specific dataset.

Keep in mind that the actual decision boundaries (e.g., 0.20 and 0.50) are arbitrary and based on general financial guidelines. You may need to adjust these thresholds or use more advanced techniques, such as cross-validation, to determine optimal splits.


#########################


Here is the Python function that implements the decision tree classifier based on the provided features and target variable:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["WC/TA"] <= 0.20
    nodes[1] = X["RE/TA"] <= 0.50
    
    if not nodes[0]:
        prediction = 0
    else:
        if nodes[1]:
            prediction = 1
        else:
            prediction = 0

    return prediction, nodes
```

This function takes a dictionary `X` as input, where the keys are the feature names and the values are the corresponding feature values. The function returns a tuple containing:

* `prediction`: an integer indicating whether the company went bankrupt (1) or not (0)
* `nodes`: a list of two boolean values representing the truth values of the inner nodes in the decision tree

In this implementation, I used the following thresholds based on general financial guidelines:

* Working Capital/Total Assets (WC/TA): 0.20
* Retained Earnings/Total Assets (RE/TA): 0.50

These thresholds may need to be adjusted or fine-tuned for better performance on your specific dataset.

You can use this function by passing in a dictionary with the feature values, like this:
```python
X = {
    "WC/TA": 0.15,
    "RE/TA": 0.30,
    "EBIT/TA": 0.05,
    "S/TA": 1.20,
    "BVE/BVL": 2.50
}

prediction, nodes = predict(X)
print("Prediction:", prediction)
print("Nodes:", nodes)
```
This would output the predicted class label (0 or 1) and the truth values of the inner nodes in the decision tree.