Based on the provided features, I will build a decision tree with a maximum depth of 2 to classify which of the two boxing fighters (Lewis and Holyfield) won each round.

Here is the decision tree:

|--- Judge in ('E. Williams', 'L. O'Connell', 'S. Christodoulu')
||--- Official judge = 'yes'
|||--- class: Lewis
||--- Official judge = 'no'
|||--- class: Holyfield
|--- Judge not in ('E. Williams', 'L. O'Connell', 'S. Christodoulu')
||--- Round <= 6
|||--- class: Holyfield
||--- Round > 6
|||--- class: Lewis

Note that the decision tree is based on the most important features, which are:

1. Judge (with specific judges being more likely to score for one fighter or the other)
2. Official judge (which indicates whether the judge's score is official or not)
3. Round (which may indicate a change in strategy or pace by the fighters)

Please note that this decision tree is an example and might not reflect real-world data or actual fight outcomes.


#########################


Here is the Python function that implements the decision tree:

```python
def predict(X: dict):
    nodes = 2 * [None]
    nodes[0] = X["Judge"] in [0, 1, 2]
    nodes[1] = (nodes[0] and X["Official"] == 1) or (not nodes[0] and X["Round"] <= 6)
    
    if nodes[0]:
        prediction = 1
    else:
        prediction = int(nodes[1])

    return prediction, [int(node) for node in nodes]
```

This function takes a dictionary `X` as input, where the keys are the feature names and the values are the corresponding feature values. It first evaluates the conditions at each inner node and stores the results in the `nodes` list. Then, it uses these results to make a prediction about which boxer won the round.

Note that I've assumed the target variable encoding is 1 for Lewis and 0 for Holyfield, as specified in the problem description. Also, I've used the feature encodings provided in the problem description to implement the decision tree conditions.