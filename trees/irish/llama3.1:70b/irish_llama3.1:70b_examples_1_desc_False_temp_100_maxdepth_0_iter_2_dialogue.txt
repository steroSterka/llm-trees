I'll build a decision tree using the most important features. Here it is:


|--- Drumcondra Verbal Reasoning Test Score <= 53
||--- Educational level attained <= 4
|||--- class: No certificate taken ( unlikely to take school leaving certificate)
||--- Educational level attained > 4
|||--- sex == female
||||--- class: Certificate taken ( likely to take school leaving certificate)
||||--- sex == male
|||||--- Prestige score for father's occupation <= 15
||||||--- Type of school == primary terminal leaver
|||||||--- class: No certificate taken 
||||||--- Type of school != primary terminal leaver
|||||||--- class: Certificate taken 


Note that this is just one possible decision tree, and there may be other valid trees depending on the specific data distribution and classification goal.


#########################


Here is the Python function that implements the decision tree:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["DVRT"] <= 53
    nodes[1] = X["Educational_level"] > 4
    nodes[2] = X["Sex"] == 0  # female
    nodes[3] = X["Prestige_score"] <= 15
    nodes[4] = X["Type_school"] == 0  # primary_terminal_leaver

    if nodes[1]:
        if nodes[2]:
            prediction = 1
        else:
            if nodes[3]:
                if nodes[4]:
                    prediction = 0
                else:
                    prediction = 1
            else:
                prediction = 1
    else:
        prediction = 0

    return prediction, [int(node) for node in nodes]
```

Note that I've used the `int()` function to convert the boolean values of the nodes to integers (0 or 1), as required by the problem statement. Also, I've assumed that the target variable is encoded as 0 = not taken and 1 = taken, as specified in the problem description.