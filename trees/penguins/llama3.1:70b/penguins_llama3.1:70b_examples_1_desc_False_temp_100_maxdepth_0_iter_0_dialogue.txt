Based on the features you provided, I will build a decision tree to classify the species of penguins (Adelie / Chinstrap / Gentoo). Here is the resulting decision tree:

|--- island == Torgersen
||--- class: Adelie
|--- island != Torgersen
||--- culmen depth (mm) <= 18.4
|||--- flipper length (mm) <= 195
||||--- class: Gentoo
|||--- flipper length (mm) > 195
||||--- class: Chinstrap
||--- culmen depth (mm) > 18.4
|||--- body mass (g) <= 3800
||||--- class: Adelie
|||--- body mass (g) > 3800
||||--- class: Gentoo

This decision tree uses the following features:

1. Island (Torgersen or not)
2. Culmen depth (mm)
3. Flipper length (mm)
4. Body mass (g)

The logic behind this decision tree is as follows:

* If the island is Torgersen, it's likely an Adelie penguin.
* If the culmen depth is less than or equal to 18.4 mm and the flipper length is less than or equal to 195 mm, it's likely a Gentoo penguin.
* If the culmen depth is less than or equal to 18.4 mm but the flipper length is greater than 195 mm, it's likely a Chinstrap penguin.
* If the culmen depth is greater than 18.4 mm and the body mass is less than or equal to 3800 g, it's likely an Adelie penguin.
* If the culmen depth is greater than 18.4 mm and the body mass is greater than 3800 g, it's likely a Gentoo penguin.

Please note that this decision tree might not be perfect, as the classification of penguins can depend on various other factors and nuances in the data.


#########################


Here is the Python function that implements the decision tree:

```python
def predict(X: dict):
    nodes = 5 * [None]
    nodes[0] = X["island"] == 2  # Torgersen
    nodes[1] = X["culmen_depth_mm"] <= 18.4
    nodes[2] = X["flipper_length_mm"] <= 195
    nodes[3] = X["body_mass_g"] <= 3800
    nodes[4] = X["culmen_depth_mm"] > 18.4

    if nodes[0]:
        prediction = 0  # Adelie
    elif nodes[1]:
        if nodes[2]:
            prediction = 1  # Gentoo
        else:
            prediction = 2  # Chinstrap
    else:
        if nodes[3]:
            prediction = 0  # Adelie
        else:
            prediction = 1  # Gentoo

    return prediction, [int(node) for node in nodes]
```

In this function, we first evaluate the conditions at each internal node and store the results in the `nodes` list. Then, based on these results, we determine the predicted class label.

Note that I've used integer values (0, 1, and 2) to represent the class labels, which correspond to Adelie, Gentoo, and Chinstrap penguins, respectively.

Also, I've assumed that the input dictionary `X` contains the feature values with the exact keys as specified in your problem description.