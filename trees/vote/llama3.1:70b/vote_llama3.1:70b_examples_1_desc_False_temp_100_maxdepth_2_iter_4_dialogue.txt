Based on the provided features, I will build a decision tree with a maximum depth of 2 to classify party affiliation (Democrat or Republican). To do this, I'll use the most important features.

**Feature Importance:**

After analyzing the features, I've determined that the top 5 most important features are:

1. Vote on aid to El Salvador (yes / no)
2. Vote on MX missile (yes / no)
3. Vote on immigration (yes / no)
4. Vote on superfund right to sue (yes / no)
5. Vote on crime (yes / no)

**Decision Tree:**

Here is the decision tree with a maximum depth of 2:
```
|--- Vote on aid to El Salvador <= yes
||--- Vote on MX missile <= yes
|||--- class: Republican
||--- Vote on MX missile > yes
|||--- class: Democrat

|--- Vote on aid to El Salvador > yes
||--- Vote on superfund right to sue <= yes
|||--- class: Democrat
||--- Vote on superfund right to sue > yes
|||--- class: Republican
```
**Explanation:**

The decision tree uses the most important features to classify party affiliation. The first split is based on the vote on aid to El Salvador, which seems to be a strong indicator of party affiliation. If the vote is "yes", it further splits based on the vote on MX missile, which also has a significant impact on party affiliation.

If the vote on aid to El Salvador is not "yes", it splits based on the vote on superfund right to sue, which is another important feature. This decision tree should be able to classify party affiliation with reasonable accuracy using these most important features.


#########################


Here is the Python function that implements the decision tree with a maximum depth of 2:

```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["el salvador aid"] == 2  # Vote on aid to El Salvador (2 = yes / 1 = no)
    nodes[1] = X["mx missile"] == 2      # Vote on MX missile (2 = yes / 1 = no)
    nodes[2] = X["superfund right to sue"] == 2  # Vote on superfund right to sue (2 = yes / 1 = no)

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Republican
        else:
            prediction = 0  # Democrat
    else:
        if nodes[2]:
            prediction = 0  # Democrat
        else:
            prediction = 1  # Republican

    return int(prediction), [int(node) for node in nodes]
```

This function takes a dictionary `X` as input, where the keys are the feature names and the values are the corresponding feature values. The function implements the decision tree logic based on the feature values and returns the predicted party affiliation (0 = Democrat, 1 = Republican) along with the boolean values of the internal nodes. Note that I've used integer values for the prediction and node outputs to match the example you provided.