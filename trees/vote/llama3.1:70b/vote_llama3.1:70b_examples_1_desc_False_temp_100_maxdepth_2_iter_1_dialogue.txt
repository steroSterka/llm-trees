I'll build a decision tree classifier with a maximum depth of 2 using the most important features to classify party affiliation (Democrat or Republican).

To determine the most important features, I'll use the information gain ratio. After analyzing the data, I've selected the top 3 features:

1. Vote on aid to El Salvador (yes / no)
2. Vote on anti-satellite test ban (yes / no)
3. Vote on MX missile (yes / no)

Here is the decision tree:
```
|--- Vote on aid to El Salvador: yes
||--- class: Democrat
|--- Vote on aid to El Salvador: no
||--- Vote on anti-satellite test ban: yes
|||--- class: Republican
||--- Vote on anti-satellite test ban: no
|||--- class: Democrat
```
However, since the maximum depth is 2, I'll try to use only two features. In this case, I'll remove the third feature (Vote on MX missile) and use the next most important feature instead:
```
|--- Vote on aid to El Salvador: yes
||--- class: Democrat
|--- Vote on aid to El Salvador: no
||--- Vote on physician fee freeze: yes
|||--- class: Republican
||--- Vote on physician fee freeze: no
|||--- class: Democrat
```
The decision tree uses the following logic:

* If a senator voted in favor of aid to El Salvador, they are likely to be a Democrat.
* If a senator did not vote in favor of aid to El Salvador, their party affiliation can be determined by their vote on physician fee freeze. If they voted in favor of the freeze, they are likely to be a Republican; otherwise, they are likely to be a Democrat.

Please note that this decision tree is based on the assumption that the features provided are sufficient for accurate classification and that there are no significant interactions between the features. In practice, you may need to consider more features or use other machine learning algorithms to achieve better accuracy.


#########################


Here is the Python function that implements the decision tree classifier:

```python
def predict(X: dict):
    """
    Predict party affiliation (Democrat or Republican) based on voting records.

    Args:
    X (dict): Dictionary of features with their corresponding values.
              Features are expected to be encoded as follows:
              - handicapped infants: Vote on the issue of handicapped infants (2 = yes / 1 = no)
              - water project cost sharing: Vote on water project cost sharing (2 = yes / 1 = no)
              - adoption of the budget resolution: Vote on adoption of the budget resolution (2 = yes / 1 = no)
              - physician fee freeze: Vote on physician fee freeze (2 = yes / 1 = no)
              - el salvador aid: Vote on aid to El Salvador (2 = yes / 1 = no)
              - religious groups in schools: Vote on allowing religious groups in schools (2 = yes / 1 = no)
              - anti satellite test ban: Vote on anti-satellite test ban (2 = yes / 1 = no)
              - aid to nicaraguan contras: Vote on aid to Nicaraguan contras (2 = yes / 1 = no)
              - mx missile: Vote on MX missile (2 = yes / 1 = no)
              - immigration: Vote on immigration (2 = yes / 1 = no)
              - synfuels corporation cutback: Vote on synfuels corporation cutback (2 = yes / 1 = no)
              - education spending: Vote on education spending (2 = yes / 1 = no)
              - superfund right to sue: Vote on superfund right to sue (2 = yes / 1 = no)
              - crime: Vote on crime (2 = yes / 1 = no)
              - duty free exports: Vote on duty free exports (2 = yes / 1 = no)
              - export administration act south africa: Vote on Export Administration Act - South Africa (2 = yes / 1 = no)

    Returns:
    tuple: A tuple containing the predicted party affiliation (0 = Democrat, 1 = Republican) and a list of node values.
    """

    nodes = 2 * [None]
    nodes[0] = X["el salvador aid"] == 2
    nodes[1] = X["physician fee freeze"] == 2

    if nodes[0]:
        if nodes[1]:
            prediction = 1  # Republican
        else:
            prediction = 0  # Democrat
    else:
        prediction = 0  # Democrat

    return prediction, nodes
```

This function takes a dictionary `X` as input, where each key corresponds to a feature and its value is the encoded vote (2 for yes, 1 for no). The function then predicts the party affiliation based on the decision tree logic implemented. The output is a tuple containing the predicted party affiliation and a list of node values.