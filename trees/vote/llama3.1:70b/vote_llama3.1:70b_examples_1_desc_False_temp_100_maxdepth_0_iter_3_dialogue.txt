Based on the features you provided, I will build a decision tree classifier using the most important features to classify party affiliation as Democrat or Republican. Here is the resulting decision tree:


|--- Vote on aid to Nicaraguan contras (yes / no)
||--- Vote on aid to Nicaraguan contras: yes
|||--- class: Republican
||--- Vote on aid to Nicaraguan contras: no
|||--- Vote on MX missile (yes / no)
||||--- Vote on MX missile: yes
|||||--- class: Republican
||||--- Vote on MX missile: no
|||||--- Vote on adoption of the budget resolution (yes / no)
||||||--- Vote on adoption of the budget resolution: yes
|||||||--- class: Democrat
||||||--- Vote on adoption of the budget resolution: no
|||||||--- class: Republican


The decision tree uses three features to classify party affiliation:

1. Vote on aid to Nicaraguan contras (yes / no)
2. Vote on MX missile (yes / no)
3. Vote on adoption of the budget resolution (yes / no)

These features are used in a hierarchical manner to split the data and make predictions about party affiliation.

Here's a brief explanation of each feature:

* Vote on aid to Nicaraguan contras: This vote is often associated with foreign policy and military intervention, which tend to be more supported by Republicans.
* Vote on MX missile: This vote relates to defense spending and military strength, which are also typically supported by Republicans.
* Vote on adoption of the budget resolution: This vote concerns fiscal policy and government spending, which can be a divisive issue between Democrats and Republicans.

By using these features in combination, the decision tree is able to accurately classify party affiliation for most instances.


#########################


Here is the Python function that implements the decision tree:
```python
def predict(X: dict):
    nodes = 3 * [None]
    nodes[0] = X["aid to nicaraguan contras"] == 2
    nodes[1] = X["mx missile"] == 2
    nodes[2] = X["adoption of the budget resolution"] == 2

    if nodes[0]:
        prediction = 1  # Republican
    else:
        if nodes[1]:
            prediction = 1  # Republican
        else:
            if nodes[2]:
                prediction = 0  # Democrat
            else:
                prediction = 1  # Republican

    return prediction, nodes
```
This function takes a dictionary `X` as input, where the keys are the feature names and the values are the corresponding feature values. The function returns a tuple containing the predicted party affiliation (0 for Democrat, 1 for Republican) and a list of boolean values representing the truth values of the inner nodes.

Note that I used the exact feature names and encodings as specified in the problem statement. Also, I assumed that the target variable is encoded as 0 for Democrat and 1 for Republican, as stated in the problem statement.