Based on the provided features, I'll build a decision tree classifier using the most important features to classify party affiliation (Democrat or Republican).

After analyzing the features, I've selected the top 5 most informative features:

1. Vote on aid to El Salvador (yes / no)
2. Vote on MX missile (yes / no)
3. Vote on anti-satellite test ban (yes / no)
4. Vote on immigration (yes / no)
5. Vote on crime (yes / no)

Here's the decision tree:
```
|--- Vote on aid to El Salvador: yes
||--- class: Democrat
|--- Vote on aid to El Salvador: no
||--- Vote on MX missile: yes
|||--- class: Republican
||--- Vote on MX missile: no
|||--- Vote on anti-satellite test ban: yes
||||--- class: Democrat
|||--- Vote on anti-satellite test ban: no
||||--- Vote on immigration: yes
|||||--- class: Democrat
||||--- Vote on immigration: no
|||||--- Vote on crime: yes
||||||--- class: Republican
|||||--- Vote on crime: no
||||||--- class: Democrat
```
This decision tree uses the selected features to classify party affiliation. Note that this is just one possible solution, and different trees can be constructed depending on the specific dataset and feature selection.

Here's a brief explanation of each node:

* The first split is based on the vote on aid to El Salvador. If the representative voted "yes", they are likely to be a Democrat.
* For those who voted "no" on aid to El Salvador, the next split is based on their vote on the MX missile. Those who voted "yes" are more likely to be Republicans.
* For those who voted "no" on the MX missile, the next split is based on their vote on the anti-satellite test ban. Those who voted "yes" are more likely to be Democrats.
* The final splits are based on votes on immigration and crime, which further refine the classification.

Keep in mind that this tree is a simplified representation of the complex relationships between the features and party affiliation. Real-world decision trees may require additional features and complexity to achieve high accuracy.


#########################


Here's the decision tree function in Python format:

```python
def predict(X: dict):
    """
    Predicts party affiliation based on voting history.
    
    Parameters:
    X (dict): Dictionary containing features as keys and their corresponding values.
    
    Returns:
    tuple: A tuple containing the predicted party affiliation (0 = Democrat, 1 = Republican) 
           and a list representing the truth values of the inner nodes.
    """
    
    # Initialize node values
    nodes = [None] * 5
    
    # Evaluate conditions for each node
    nodes[0] = X["el salvador aid"] == 2
    nodes[1] = X["mx missile"] == 2 and not nodes[0]
    nodes[2] = X["anti satellite test ban"] == 2 and not nodes[0] and not nodes[1]
    nodes[3] = X["immigration"] == 2 and not nodes[0] and not nodes[1] and not nodes[2]
    nodes[4] = X["crime"] == 2 and not nodes[0] and not nodes[1] and not nodes[2] and not nodes[3]

    # Map boolean values to integers
    nodes = [int(node) for node in nodes]
    
    # Make prediction based on node values
    if nodes[0]:
        prediction = 0
    elif nodes[1]:
        prediction = 1
    elif nodes[2]:
        prediction = 0
    elif nodes[3]:
        prediction = 0
    else:
        prediction = int(nodes[4])
    
    return prediction, nodes
```
This function takes a dictionary `X` containing the features and their corresponding values as input. It evaluates the conditions for each node based on these values and stores them in the `nodes` list. The predicted party affiliation is then determined based on the node values.

You can use this function by creating a dictionary with the required features and passing it to the `predict` function, like so:

```python
features = {
    "el salvador aid": 2,
    "mx missile": 1,
    "anti satellite test ban": 2,
    "immigration": 1,
    "crime": 2
}

prediction, nodes = predict(features)
print("Predicted party affiliation:", prediction)
print("Node values:", nodes)
```