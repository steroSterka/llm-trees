To build a decision tree classifier with a maximum depth of 2, I will first need to determine the most important features. Since the data is not provided, I'll assume that all features are equally important for simplicity.

Given the task, I will select the top two most discriminatory features based on their potential impact on party affiliation (Democrat or Republican). For this example, let's consider "Vote on aid to El Salvador" and "Vote on anti-satellite test ban" as these could be highly divisive issues that might strongly correlate with party affiliations during the period in question.

Here is a hypothetical decision tree:

- **Root Node**: Vote on aid to El Salvador (yes / no)
  - **Left Child (No)**: This vote could potentially align more with Republican views due to historical context.
    - Class: Republican
  - **Right Child (Yes)**: This could indicate support for foreign aid, which might lean towards Democratic party affiliations during certain periods.
    - **Child Node**: Vote on anti-satellite test ban (yes / no)
      - **Left Grandchild (No)**: Opposition to an arms control measure like this might align with more conservative or Republican stances.
        - Class: Republican
      - **Right Grandchild (Yes)**: Support for such a ban could reflect more liberal or Democratic positions on disarmament and international cooperation.
        - Class: Democrat

This decision tree is highly speculative, as the actual classification would depend on the specific voting patterns of Democrats and Republicans at the time these votes were taken. The selection of "Vote on aid to El Salvador" and "Vote on anti-satellite test ban" as the key features is based on their potential to divide party lines during a particular era.

In practice, you would use a dataset containing these features along with the known classifications (Democrat or Republican) for each set of votes to train a decision tree classifier. The classifier would automatically select the most discriminatory features and construct the tree accordingly. 

Here's how this might be implemented in Python using scikit-learn:

```python
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
import pandas as pd

# Assume 'data' is a DataFrame with your features and target variable
# Features are all vote columns, and the target is 'Party Affiliation'

X = data[['Vote on aid to El Salvador', 'Vote on anti-satellite test ban']]  # Simplified for this example
y = data['Party Affiliation']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(max_depth=2)
clf.fit(X_train, y_train)

# To visualize the tree
from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(10,8))
plot_tree(clf, feature_names=X.columns, class_names=y.unique(), filled=True)
plt.show()
```

This code snippet demonstrates how to train a decision tree classifier with a maximum depth of 2 using the specified features and visualize the resulting tree. The actual implementation would depend on your specific dataset and requirements.


#########################


Here's a Python function that implements the decision tree for predicting party affiliation based on votes:

```python
def predict_party_affiliation(X: dict):
    """
    Predicts party affiliation (Democrat or Republican) based on votes.

    Args:
        X (dict): Dictionary containing vote information.
            - handicapped infants: Vote on the issue of handicapped infants (2 = yes / 1 = no)
            - water project cost sharing: Vote on water project cost sharing (2 = yes / 1 = no)
            - adoption of the budget resolution: Vote on adoption of the budget resolution (2 = yes / 1 = no)
            - physician fee freeze: Vote on physician fee freeze (2 = yes / 1 = no)
            - el salvador aid: Vote on aid to El Salvador (2 = yes / 1 = no)
            - religious groups in schools: Vote on allowing religious groups in schools (2 = yes / 1 = no)
            - anti satellite test ban: Vote on anti-satellite test ban (2 = yes / 1 = no)
            - aid to nicaraguan contras: Vote on aid to Nicaraguan contras (2 = yes / 1 = no)
            - mx missile: Vote on MX missile (2 = yes / 1 = no)
            - immigration: Vote on immigration (2 = yes / 1 = no)
            - synfuels corporation cutback: Vote on synfuels corporation cutback (2 = yes / 1 = no)
            - education spending: Vote on education spending (2 = yes / 1 = no)
            - superfund right to sue: Vote on superfund right to sue (2 = yes / 1 = no)
            - crime: Vote on crime (2 = yes / 1 = no)
            - duty free exports: Vote on duty free exports (2 = yes / 1 = no)
            - export administration act south africa: Vote on Export Administration Act - South Africa (2 = yes / 1 = no)

    Returns:
        tuple: A tuple containing the predicted party affiliation (0 = Democrat, 1 = Republican) and a list of node values.
    """

    nodes = 2 * [None]
    # Node 0: Vote on el salvador aid (yes = 2, no = 1)
    nodes[0] = X["el salvador aid"] == 2
    
    # Node 1: Vote on anti satellite test ban (yes = 2, no = 1)
    nodes[1] = X["anti satellite test ban"] == 2

    if nodes[0]:
        # If voted yes on el salvador aid, likely Republican
        prediction = 1
    else:
        # If voted no on el salvador aid, check vote on anti satellite test ban
        if nodes[1]:
            # If voted yes on anti satellite test ban, likely Democrat
            prediction = 0
        else:
            # If voted no on anti satellite test ban, likely Republican
            prediction = 1

    # Convert boolean node values to integers (True -> 1, False -> 0)
    nodes = [int(node) for node in nodes]

    return prediction, nodes
```

This decision tree uses two features: "el salvador aid" and "anti satellite test ban". The tree predicts Republican affiliation if the vote on "el salvador aid" is yes (2), and otherwise checks the vote on "anti satellite test ban" to determine the party affiliation.

Example usage:

```python
votes = {
    "handicapped infants": 1,
    "water project cost sharing": 1,
    "adoption of the budget resolution": 1,
    "physician fee freeze": 1,
    "el salvador aid": 2,  # yes
    "religious groups in schools": 1,
    "anti satellite test ban": 1,
    "aid to nicaraguan contras": 1,
    "mx missile": 1,
    "immigration": 1,
    "synfuels corporation cutback": 1,
    "education spending": 1,
    "superfund right to sue": 1,
    "crime": 1,
    "duty free exports": 1,
    "export administration act south africa": 1
}

prediction, nodes = predict_party_affiliation(votes)
print("Predicted party affiliation:", prediction)  # 0 = Democrat, 1 = Republican
print("Node values:", nodes)
```